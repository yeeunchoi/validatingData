which(isnull=="TRUE", arr.ind = TRUE)
n<-which(isnull=="TRUE", arr.ind = TRUE)
class(N)
class(n)
newdata <- data.frame(lapply(n, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
class(n)
n
as.data.frame(n)
n<-as.data.frame(which(isnull=="TRUE", arr.ind = TRUE))
class(n)
meta
heading[1]
select(meta, X__1)
select(meta, Label, X__1)
select(meta, Label, X__1, X__2)
na.omit(select(meta, Label, X__1, X__2))
as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
rule <- file("rules.txt")
writeLines("'col' > 0")
close(rule)
rule <- file("rules.txt")
meta
rules <- editrules::editfile("rules.txt")
errors <- data.frame(editrules::violatedEdits(rules, data))
newdata <- data.frame(lapply(errors, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
errors
errors
data
rules
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
errors<- data.frame((editrules::localizeErrors(rules, data))$adapt)
newdata <- data.frame(lapply(DE2, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
newdata <- data.frame(lapply(errors, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
newdata
n<-as.data.frame(which(isnull=="TRUE", arr.ind = TRUE)) # store the result in a data frame
n# row num + 1 for the actual table
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
library("git2r", lib.loc="~/R/win-library/3.5")
detach("package:git2r", unload=TRUE)
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
newdata <- data.frame(lapply(errors, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
as.data.frame(which(errors=="TRUE", arr.ind = TRUE))
errors <- data.frame(editrules::violatedEdits(rules, data))
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
errors
class(errors)
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
errors<- data.frame((editrules::localizeErrors(rules, data))$adapt)
class(errors)
errors
as.data.frame(which(errors=="TRUE", arr.ind = TRUE))
rules <- editrules::editfile("rules.txt")
rules
errors <- data.frame(editrules::violatedEdits(rules, data))
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
errors
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
location<- data.frame((editrules::localizeErrors(rules, data))$adapt)
as.data.frame(which(location=="TRUE", arr.ind = TRUE))
# metadata analysis
as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
rules <- editrules::editfile("rules.txt")
rules
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
rules <- editrules::editfile("rules.txt")
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
errors
errors <- data.frame(editrules::violatedEdits(rules, data))
rules
rules <- editrules::editfile("rules.txt")
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
rules <- editrules::editfile("rules.txt")
rules
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
rules <- editrules::editfile("rules.txt")
rules
rules <- editrules::editfile("rules.txt")
rules
errors <- data.frame(editrules::violatedEdits(rules, data))
errors
rule <- editrules::editset(c("col1 %in% c(1:10)", "col3 %in% c(1:100)"))
source('C:/Users/ADMIN/Desktop/validatingData/testing2.R', echo=TRUE)
rule <- editrules::editset(c("col1 %in% c(1:10)", "col3 %in% c(1:100)"))
rule
errors <- data.frame(editrules::violatedEdits(rule, data))
errors
rule <- editrules::editset(c("col1 %in% c(1:10)", "col3 >= 1", "col3 <= 100")))
rule <- editrules::editset(c("col1 %in% c(1:10)", "col3 >= 1", "col3 <= 100"))
rule
errors <- data.frame(editrules::violatedEdits(rule, data))
errors
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
rule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
rule
errors <- data.frame(editrules::violatedEdits(rule, data))
errors
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
location<- data.frame((editrules::localizeErrors(rule, data))$adapt)
as.data.frame(which(location=="TRUE", arr.ind = TRUE))
location
install.packages(c(dplyr, readxl, editrules))
install.packages(c("dplyr", "readxl", "editrules"))
as.data.frame(which(isnull=="TRUE", arr.ind = TRUE)) # store the result in a data frame
require(dplyr)
data<-readxl::read_xlsx("testdata.xlsx")
meta<-readxl::read_xlsx("testmetadata.xlsx")
meta<-meta[-1,]
head(data)
head(matrix(data)_
head(matrix(data))
summary(data)
heading <- c(names(data))
labels <-unlist(c(dplyr::select(meta,Label)),use.names=FALSE)
identical(heading,labels) # includes all labels in metadata?
nullList<-meta %>%
filter(Nullble == "no") %>% #convert every character into lower case
select(Label)
nullList<-rep(nullList)
for (item in nullList){
selected<- data %>%
dplyr::select(item)
}
isnull<-data.frame(is.na(selected))
isnull
class(isnull)
# count null 갯수
count(isnull)
isnull
# count null 갯수
table(isnull)["TRUE"]
# count null 갯수
sum(isnull, na.rm = TRUE)
# count null 갯수
sum(isnull)
# count null 갯수
count_if(TRUE, isnull)
# count null 갯수
count_if(TRUE, isnull)
# count null 갯수
isnull[TRUE]
# count null 갯수
count(isnull[TRUE])
# count null 갯수
count(isnull["TRUE"])
# count null 갯수
table(isnull)[TRUE]
# count null 갯수
table(isnull)["TRUE"]
# count null 갯수
sum(isnull)
# count null 갯수
table(isnull)
length(isnull[isnull == TRUE])
isnull
as.data.frame(which(isnull=="TRUE", arr.ind = TRUE)) # store the result in a data frame
packages <- c("dplyr", "readxl", "stringr", "editrules")
install.packages(packages)
require(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("dplyr", "readxl", "stringr", "editrules")
ipak(packages)
isnull
as.data.frame(which(isnull=="TRUE", arr.ind = TRUE)) # store the result in a data frame to be stored in result text file
data[,]
data[2:3,]
data[4,]
as.data.frame(data[4,])
# generating two text files : summary and result (output)
write.table(data, file= "testing.txt", sep=" ")
export<-as.data.frame(which(isnull=="TRUE", arr.ind = TRUE)) # store the result in a data frame to be stored in result text file
# row num + 1 for the actual table
write.table(export, file= "testing.txt", sep=" ")
# generating two text files : summary and result (output)
write.table("Summary", "summary.txt")
# generating two text files : summary and result (output)
write.text("Summary", "summary.txt")
# generating two text files : summary and result (output)
writeLines("Summary", "summary.txt")
# metadata analysis
as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
# metadata analysis
# for numerical data only
a<-as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
# x__1 : min value
# x__2 : max value
# read them automatically using sprintf() function
# store them in a vector
length(a)
a[,3]
a[,i]
for (i in 3){
a[,i]
}
for (i in 3){
select(a[,i])
}
a
a %>%
select(Label)
a %>%
select(Label) %>%
data.frame()
new<- a %>%
select(Label) %>%
data.frame()
new
new<- a %>%
select(Label) %>%
c()
new
for (item in c(Label, x__1, x__2)){
a %>%
select(item %>% c())
}
length(a)
a
for (item in c("Label", "x__1", "x__2")){
a %>%
select(item %>% c())
}
for (item in c("Label", "X__1", "X__2")){
a %>%
select(item %>% c())
}
for (item in c("Label", "X__1", "X__2")){
a %>%
select(item) %>%
c() %>%
return()
}
a %>%
select(item) %>%
c()
for (item in c("Label", "X__1", "X__2")){
a %>%
select(item) %>%
c()
}
for (item in c("Label", "X__1", "X__2")){
a%>%
select(item)
}
for (item in c("Label", "X__1", "X__2")){
select(a, item)
}
for (item in c("Label", "X__1", "X__2")){
print(select(a, item))
}
nrow(a)
class(a[1,3])
for (i in 1:nrow(a)){
min <- sprintf('a[i,1] >= %s', a[i,2])
max <- sprintf('a[i,1] <= %s', a[i,3])
}
min
for (i in 1:nrow(a)){
min <- sprintf(a[i,1] '>= %s', a[i,2])
max <- sprintf(a[i,1] '<= %s', a[i,3])
}
for (i in 1:nrow(a)){
min <- sprintf('>= %s', a[i,2])
max <- sprintf('<= %s', a[i,3])
}
min
for (i in 1:nrow(a)){
min <- sprintf(a[i,1],'>= %s', a[i,2])
max <- sprintf(a[i,1],'<= %s', a[i,3])
# store in rule text file
}
min
for (i in 1:nrow(a)){
min <- sprintf(a[i,1],'%s >= %s', a[i,2])
max <- sprintf(a[i,1],'<= %s', a[i,3])
# store in rule text file
}
min
sprintf(a[1,1], "%s >=")
print(a[1,1], ">=", a[1,2])
sprintf(a[1,1], ">=  %s", a[1,2])
sprintf( ">=  %s", a[1,2])
sprintf(a[1,1] "s% >= %s", a[1,2])
sprintf(a[1,1] ">= %s", a[1,2])
sprintf(a[1,1], ">= %s", a[1,2])
cat(a[1,1], a[1,2])
cat(a[1,1], ">=",a[1,2])
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2])
max <- cat(a[i,1], "<=",a[i,3])
# store in rule text file
}
min <- cat(a[i,1], ">=",a[i,2],"\n")
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3])
# store in rule text file
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
# store in rule text file
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
writeLines(min, "rules.txt")
writeLines(max, "rules.txt")
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
writeLines("min", "rules.txt")
writeLines(max, "rules.txt")
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
writeLines("min", "rules.txt")
writeLines("max", "rules.txt")
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
writeLines(min, "rules.txt")
writeLines(max, "rules.txt")
}
for (i in 1:nrow(a)){
min <- cat(a[i,1], ">=",a[i,2],"\n")
max <- cat(a[i,1], "<=",a[i,3],"\n")
writeLines(as.character(min), "rules.txt")
writeLines(as.character(max), "rules.txt")
}
min <- cat(a[1,1], ">=", a[1,2])
min
?cat
for (i in 1:nrow(a)){
sink("rules.txt")
cat(a[i,1], ">=",a[i,2],"\n")
cat(a[i,1], "<=",a[i,3],"\n")
}
for (i in 1:nrow(a)){
sink("rules.txt")
cat(a[i,1], ">=",a[i,2],"\n")
cat(a[i,1], "<=",a[i,3],"\n")
sink()
}
print(i)
for (i in 1:nrow(a)){
print(i)
sink("rules.txt")
cat(a[i,1], ">=",a[i,2],"\n")
cat(a[i,1], "<=",a[i,3],"\n")
sink()
}
for (i in 1:nrow(a)){
cat(a[i,1], ">=",a[i,2],"\n", file= "rules.txt")
cat(a[i,1], "<=",a[i,3],"\n", file ="rules.txt")
}
for (i in 1:nrow(a)){
cat(a[i,1], ">=",a[i,2],"\n", file= "rules.txt", append = TRUE)
cat(a[i,1], "<=",a[i,3],"\n", file ="rules.txt", append = TRUE)
}
for (i in 1:nrow(a)){
cat(a[i,1], ">=",a[i,2],"\n", file= "rules.txt", append = TRUE)
cat(a[i,1], "<=",a[i,3],"\n", file ="rules.txt", append = TRUE)
}
close("rules.txt")
a<- c(a[i,1], ">", a[1,2])
a
a<- sprintf(a[i,1], ">", a[1,2])
a<- sprintf(a[1,1], ">", a[1,2])
# metadata analysis
# for numerical data only
aa<-as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
a<- sprintf(aa[1,1], ">", aa[1,2])
arule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
rule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
a
paste(aa[1,1],">=",a[1,2])
paste(aa[1,1],">=",aa[1,2])
ab<- paste(aa[1,1],">=",aa[1,2])
ab
# metadata analysis
# for numerical data only
a<-as.data.frame(na.omit(select(meta, Label, X__1, X__2)))
rules <- c()
for (i in 1:nrow(a)){
min <- paste(a[i,1], ">=", a[i,2])
max <- paste(a[i,1], "<=", a[i,3])
rules<- c(min, max)
}
rule
rules
for (i in 1:2){
print(i)
}
for (i in 1:2){
i
}
for (i in 1:2){
return(i)
}
for (i in 1:2){
cat(i)
}
nrow(a)
rule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
rule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
errors <- data.frame(editrules::violatedEdits(rule, data))
errors
packages <- c("dplyr", "readxl", "stringr", "editrules")
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# open data/ metadata files
data<-readxl::read_xlsx("testdata.xlsx")
meta<-readxl::read_xlsx("testmetadata.xlsx")
meta<-meta[-1,] # omitting the first row of the metadata b/c it contains nothing
rule <- editrules::editset(c("col1 >= 0", "col1 <= 10","col3 >= 1", "col3 <= 100"))
errors <- data.frame(editrules::violatedEdits(rule, data))
errors
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
location<- data.frame((editrules::localizeErrors(rule, data))$adapt)
location
as.data.frame(which(location=="TRUE", arr.ind = TRUE))
as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
E1 <- as.data.frame(which(errors=="TRUE", arr.ind = TRUE)) # tells which rule has been violated
E2 <- as.data.frame(which(location=="TRUE", arr.ind = TRUE))
class(E1)
class(E2)
E2[14,2]
E2 <- as.data.frame(which(location=="TRUE", arr.ind = TRUE))
E2[14,2]
E2
location[14,2]
location[14,]
data[14,]
as.vector(E2[row])
as.vector(E2[,row])
E2[,row]
E2[,"row"]
sort(E2[,"row"])
as.vector(sort(E2[,"row"]))
as.vector(as.numeric(sort(E2[,"row"])))
l <- as.vector(as.numeric(sort(E2[,"row"])))
l
for (i in length(l)){
data[i,]
}
as.vector(as.numeric(sort(E2[,"row"])))
l<-c((as.numeric(sort(E2[,"row"]))))
l
# data 에 잘못되었는지 보여주려면 row num만 필요함
for (i in l){
print(i)
}
# data 에 잘못되었는지 보여주려면 row num만 필요함
for (i in l){
print(data[i,])
}
# data 에 잘못되었는지 보여주려면 row num만 필요함
# actual row number도 있어야함
for (i in l){
print(data[i,])
}
