data <- readxl::read_xlsx("C:/Users/ADMIN/Desktop/metadata.xlsx")
data
return(data)
## open metadata into R
read_data <- function(filepath){
data <- readxl::read_xlsx("C:/Users/ADMIN/Desktop/metadata.xlsx")
return(data)
}
read_data("C:/Users/ADMIN/Desktop/metadata.xlsx")
data
## open metadata into R
read_data <- function(filepath){
data <- readxl::read_xlsx(filepath)
}
read_data("C:/Users/ADMIN/Desktop/metadata.xlsx")
data<- read_data("C:/Users/ADMIN/Desktop/metadata.xlsx")
data
## open metadata into R
read_data <- function(filepath){
readxl::read_xlsx(filepath)
}
data<- read_data("C:/Users/ADMIN/Desktop/metadata.xlsx")
data
install.packages("devtools")
install.packages("roxygen2")
### READING FILE ###
## IF the file is excel
data <-read_xlsx("file path") # if each sheet has to be examined, use "sheet = n " argument
require(readxl)
data <- readxl::read_xlsx("C:/Users/ADMIN/Desktop/metadata.xlsx")
data
data.header
readxl::read_xlsx(datapath)
# both data and metadata files
read_data <- function(datapath){
readxl::read_xlsx(datapath)
}
# for data file
data_list <- function(data){
datalist <- c(names(data))
}
# for metadate file ONLY
meta_list <- function(metadata, label){
metalist <- rep(dplyr::select(metadata, label)) ## NA should be omitted
}
# checking if the item in the data file matches with the labels in the metadata using two lists generated
# returns TRUE or FALSE
ismatching<- function (datalist, metalist){
identical(datalist,metalist)
} ## if returns false, cleaning process can no longer be processed
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
nullList <- data %>%
dplyr::filter(Nullble == "NO") %>%
dplyr::select(Label)
nullList<- rep(nullList)
}
# A function that checks null
null_check <- function (nlist, data){
for (item in nlist){
selected<- data %>%
dplyr::select(item)
}
isnull<-data.frame(is.na(selected))
isnull%>%
dplyr::filter_all(any_vars(stringr::str_detect(.,pattern = "TRUE")))
}
addRule <- function(rulefilepath, rules){
cat(rules, "\n",
file = rulefilepath,
append = TRUE)
} # must write one at a time
violatedRule <- function(data, filepath){
rules <- editrules::editfile(filepath)
errors <- data.frame(editrules::violatedEdits(rules, data))
newdata <- data.frame(lapply(errors, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
# write the results in text file
}
localize<- function(data,filepath){
rules <- editruls::editfile(filepath)
errors<- data.frame((editrules::localizeErrors(rules, data))$adapt)
newdata <- data.frame(lapply(DE2, function(x) if(is.logical(x)) {
return(as.character(x))
} else {
return(x)
}
), stringsAsFactors=FALSE)
newdata %>%
dplyr::filter_all(any_vars(stringr::str_detect(., pattern = "TRUE")))
# write the results in a text file
}
result<- function(filename, lines){
result <- file(filename)
writeLines(c(lines), result)
close(result)
}
data<- read_data("C:/Users/ADMIN/Desktop/testdata.xlsx")
metadata <- read_data("C:/Users/ADMIN/Desktop/testdata.xlsx")
data
metadata
metadata <- read_data("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
metadata
datalist<-data_list(data)
datalist<-data_list(data)
metalist <-meta_list(metadata)
metalist <-meta_list(metadata, Label)
metadata <- read_data("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
metalist <-meta_list(metadata,Label)
metalist <-meta_list(metadata,"Label")
datalist
metalist
metadata <- metadata[-1,]
metadata
read_meta <- function(metapath){
meta <- readxl::read_xlsx(datapath)
meta <- meta[-1,]
}
metadata <- read_meta("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
read_meta <- function(metapath){
meta <- readxl::read_xlsx(metapath)
meta <- meta[-1,]
}
metadata <- read_meta("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
metadata
datalist<-data_list(data)
metalist <-meta_list(metadata,"Label")
datalist
metalist
ismatching(datalist, metalist)
datalist
class(datalist)
class(metalist)
# for data file
data_list <- function(data){
datalist <- rep(c(names(data)))
}
datalist<-data_list(data)
class(datalist)
class(metalist)
# for data file
data_list <- function(data){
datalist <- data.frame(c(names(data)))
}
datalist<-data_list(data)
class(datalist)
class(metalist)
identical(datalist, metalist)
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- data.frame(rep(dplyr::select(metadata,label))) ## NA should be omitted
}
metalist <-meta_list(metadata,"Label")
class(metalist)
identical(datalist, metalist)
datalist
metalist
# for data file
data_list <- function(data){
datalist <- c(names(data))
}
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- rep(dplyr::select(metadata,label)) ## NA should be omitted
}
datalist<-data_list(data)
metalist <-meta_list(metadata,"Label")
datalist
metalist
class(datalist)
class(metalist)
?identical
all(datalist, metalist)
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- c(rep(dplyr::select(metadata,label))) ## NA should be omitted
}
metalist <-meta_list(metadata,"Label")
class(datalist)
class(metalist)
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- rep(dplyr::select(metadata,label)) ## NA should be omitted
}
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- c(dplyr::select(metadata,label)) ## NA should be omitted
}
metalist <-meta_list(metadata,"Label")
metalist
class(metalist)
class(datalist)
class(datalist)
class(metalist)
unlist(metalist, use.names=FALSE)
metalist<-unlist(metalist, use.names=FALSE)
class(metalist)
class(datalist)
all(datalist, metalist)
identical(datalist, metalist)
# for metadate file ONLY
meta_list <- function(metadata,label){
metalist <- c(dplyr::select(metadata,label)) ## NA should be omitted
metalist<-unlist(metalist, use.names=FALSE)
}
metalist <-meta_list(metadata,"Label")
class(datalist)
class(metalist)
ismatching(datalist, metalist)
null_list(metadata, nullable, Label)
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
nullList <- dplyr:: data %>%
dplyr::filter(Nullble == "NO") %>%
dplyr::select(Label)
nullList<- rep(nullList)
}
null_list(metadata, nullable, Label)
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- data %>%
filter(Nullble == "NO") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, nullable, Label)
null_list(metadata, "nullable", "Label")
null_list(metadata, "Nullable", "Label")
metadata
null_list(metadata, "Nullble", "Label")
null_list(metadata, Nullble, "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- data %>%
filter(nullable == "NO") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, Nullble, "Label")
null_list(metadata, "Nullble", "Label")
metadata
null_list(metadata, "Nullble", "Label")
null_list(metadata, "Nullble", Label)
null_list(metadata, "Nullble", "Label")
metadata
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- data %>%
filter(nullable == "NO") %>%
select(Label)
nullList<- rep(nullList)
}
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- data %>%
filter(nullable == "NO") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- data %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, label){
require(dplyr)
nullList <- data %>%
filter(nullable == "no") %>%
select(label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
metadata
metalist
dplyr::select(Label, data)
names(data)
dplyr::select(Label, metadata)
names(metadata)
dplyr::select(Label, metadata)
dplyr::select(metadata,Label)
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, label){
#require(dplyr)
nullList <- dplyr::select(filter(nullable == "no",metadata), label)
#data %>%
#filter(nullable == "no") %>%
#select(label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, label){
require(dplyr)
nullList <- select(filter(data, Nullble == "NO"), Label)
#dplyr::select(filter(nullable == "no",metadata), label)
#data %>%
#filter(nullable == "no") %>%
#select(label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, label){
require(dplyr)
nullList <- select(filter(data, nullable == "NO"), Label)
#dplyr::select(filter(nullable == "no",metadata), label)
#data %>%
#filter(nullable == "no") %>%
#select(label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, label){
require(dplyr)
nullList <- select(filter(data, nullable == "NO"), label)
#dplyr::select(filter(nullable == "no",metadata), label)
#data %>%
#filter(nullable == "no") %>%
#select(label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
metadata%>%
filter(nullble == "no") %>%
select(Label)
metadata%>%
filter(Nullble == "no") %>%
select(Label)
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <-
data %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <-
metadata %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
}
null_list(metadata, "Nullble", "Label")
null_list
nullList<-null_list(metadata, "Nullble", "Label")
nullList
View(nullList)
nullList <-
metadata %>%
filter(Nullble == "no") %>%
select(Label)
nullList<- rep(nullList)
nullList
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <-
metadata %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
return(nullList)
}
nullList<-null_list(metadata, "Nullble", "Label")
nullList
nullList <-
metadata %>%
filter(Nullble == "no")
nullList
nullList <-
metadata %>%
filter(Nullble == "no") %>%
select(Label)
nullList
nullList<- rep(nullList)
nullList
nullList<-null_list(metadata, "Nullble", "Label")
nullList
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- metadata %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
return(nullList)
}
nullList<-null_list(metadata, "Nullble", "Label")
nullList
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- metadata %>%
filter(nullable == "no") %>%
select(Label)
#nullList<- rep(nullList)
return(nullList)
}
nullList<-null_list(metadata, "Nullble", "Label")
nullList
nullList
nullList <-
metadata %>%
filter(Nullble == "no") %>%
select(Label)
#nullList <-
metadata %>%
filter(Nullble == "no") %>%
select(Label)
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- metadata %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
return(nullList)
}
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- metadata %>%
filter(nullable == "no") %>%
select(Label)
nullList<- rep(nullList)
return(nullList)
}
nullList<-null_list(metadata, "Nullble", "Label")
nullList
metadata
nullList<-null_list(metadata, "Nullble", "Label")
nullList
# A function that creates a list that contains items that should not contain null
null_list <- function (metadata, nullable, Label){
require(dplyr)
nullList <- metadata %>%
filter(nullable == "no") %>%
select(Label)
n<- rep(nullList)
return(n)
}
nullList<-null_list(metadata, "Nullble", "Label")
nullList
#nullList <-
metadata %>%
filter(Nullble == "no") %>% select(Label)
metadata <- read_meta("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
nullList<-null_list(metadata, "Nullble", "Label")
nullList
data<-readxl::read_xlsx("C:/Users/ADMIN/Desktop/testdata.xlsx")
meta<-readxl::read_xlsx("C:/Users/ADMIN/Desktop/testmetadata.xlsx")
meta<-meta[-1,]
heading <- c(names(data))
labels <-c(dplyr::select(meta,Label))
identical(heading,lables)
labels
identical(heading,labels)
labels <-unlist(c(dplyr::select(meta,Label)),use.names=FALSE)
identical(heading,labels)
nullList<-meta %>%
filter(Nullble == "no") %>%
select(Label)
source('~/.active-rstudio-document', echo=TRUE)
nullList
nullList<-rep(nullList)
for (item in nullList){
selected<- data %>%
dplyr::select(item)
}
isnull<-data.frame(is.na(selected))
isnull%>%
dplyr::filter_all(any_vars(stringr::str_detect(.,pattern = "TRUE")))
isnull
isnull%>%
dplyr::filter_all(any_vars(stringr::str_detect(.,pattern = "TRUE")))
class(isnull)
data<-readxl::read_xlsx("../testdata.xlsx")
data<-readxl::read_xlsx("testdata.xlsx")
meta<-readxl::read_xlsx("testmetadata.xlsx")
q()
